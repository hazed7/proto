// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: reporting.proto

package reporting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReportingService_GeneratePerformanceReport_FullMethodName = "/reporting.ReportingService/GeneratePerformanceReport"
	ReportingService_GenerateAttendanceReport_FullMethodName  = "/reporting.ReportingService/GenerateAttendanceReport"
	ReportingService_ScheduleReport_FullMethodName            = "/reporting.ReportingService/ScheduleReport"
	ReportingService_GetScheduledReports_FullMethodName       = "/reporting.ReportingService/GetScheduledReports"
)

// ReportingServiceClient is the client API for ReportingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportingServiceClient interface {
	GeneratePerformanceReport(ctx context.Context, in *PerformanceReportRequest, opts ...grpc.CallOption) (*PerformanceReportResponse, error)
	GenerateAttendanceReport(ctx context.Context, in *AttendanceReportRequest, opts ...grpc.CallOption) (*AttendanceReportResponse, error)
	ScheduleReport(ctx context.Context, in *ScheduleReportRequest, opts ...grpc.CallOption) (*ScheduleReportResponse, error)
	GetScheduledReports(ctx context.Context, in *GetScheduledReportsRequest, opts ...grpc.CallOption) (*GetScheduledReportsResponse, error)
}

type reportingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportingServiceClient(cc grpc.ClientConnInterface) ReportingServiceClient {
	return &reportingServiceClient{cc}
}

func (c *reportingServiceClient) GeneratePerformanceReport(ctx context.Context, in *PerformanceReportRequest, opts ...grpc.CallOption) (*PerformanceReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformanceReportResponse)
	err := c.cc.Invoke(ctx, ReportingService_GeneratePerformanceReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) GenerateAttendanceReport(ctx context.Context, in *AttendanceReportRequest, opts ...grpc.CallOption) (*AttendanceReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendanceReportResponse)
	err := c.cc.Invoke(ctx, ReportingService_GenerateAttendanceReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) ScheduleReport(ctx context.Context, in *ScheduleReportRequest, opts ...grpc.CallOption) (*ScheduleReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleReportResponse)
	err := c.cc.Invoke(ctx, ReportingService_ScheduleReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingServiceClient) GetScheduledReports(ctx context.Context, in *GetScheduledReportsRequest, opts ...grpc.CallOption) (*GetScheduledReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScheduledReportsResponse)
	err := c.cc.Invoke(ctx, ReportingService_GetScheduledReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportingServiceServer is the server API for ReportingService service.
// All implementations must embed UnimplementedReportingServiceServer
// for forward compatibility.
type ReportingServiceServer interface {
	GeneratePerformanceReport(context.Context, *PerformanceReportRequest) (*PerformanceReportResponse, error)
	GenerateAttendanceReport(context.Context, *AttendanceReportRequest) (*AttendanceReportResponse, error)
	ScheduleReport(context.Context, *ScheduleReportRequest) (*ScheduleReportResponse, error)
	GetScheduledReports(context.Context, *GetScheduledReportsRequest) (*GetScheduledReportsResponse, error)
	mustEmbedUnimplementedReportingServiceServer()
}

// UnimplementedReportingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportingServiceServer struct{}

func (UnimplementedReportingServiceServer) GeneratePerformanceReport(context.Context, *PerformanceReportRequest) (*PerformanceReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePerformanceReport not implemented")
}
func (UnimplementedReportingServiceServer) GenerateAttendanceReport(context.Context, *AttendanceReportRequest) (*AttendanceReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAttendanceReport not implemented")
}
func (UnimplementedReportingServiceServer) ScheduleReport(context.Context, *ScheduleReportRequest) (*ScheduleReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleReport not implemented")
}
func (UnimplementedReportingServiceServer) GetScheduledReports(context.Context, *GetScheduledReportsRequest) (*GetScheduledReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledReports not implemented")
}
func (UnimplementedReportingServiceServer) mustEmbedUnimplementedReportingServiceServer() {}
func (UnimplementedReportingServiceServer) testEmbeddedByValue()                          {}

// UnsafeReportingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportingServiceServer will
// result in compilation errors.
type UnsafeReportingServiceServer interface {
	mustEmbedUnimplementedReportingServiceServer()
}

func RegisterReportingServiceServer(s grpc.ServiceRegistrar, srv ReportingServiceServer) {
	// If the following call pancis, it indicates UnimplementedReportingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportingService_ServiceDesc, srv)
}

func _ReportingService_GeneratePerformanceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformanceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GeneratePerformanceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingService_GeneratePerformanceReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GeneratePerformanceReport(ctx, req.(*PerformanceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_GenerateAttendanceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttendanceReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GenerateAttendanceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingService_GenerateAttendanceReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GenerateAttendanceReport(ctx, req.(*AttendanceReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_ScheduleReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).ScheduleReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingService_ScheduleReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).ScheduleReport(ctx, req.(*ScheduleReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingService_GetScheduledReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduledReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServiceServer).GetScheduledReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingService_GetScheduledReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServiceServer).GetScheduledReports(ctx, req.(*GetScheduledReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportingService_ServiceDesc is the grpc.ServiceDesc for ReportingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reporting.ReportingService",
	HandlerType: (*ReportingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeneratePerformanceReport",
			Handler:    _ReportingService_GeneratePerformanceReport_Handler,
		},
		{
			MethodName: "GenerateAttendanceReport",
			Handler:    _ReportingService_GenerateAttendanceReport_Handler,
		},
		{
			MethodName: "ScheduleReport",
			Handler:    _ReportingService_ScheduleReport_Handler,
		},
		{
			MethodName: "GetScheduledReports",
			Handler:    _ReportingService_GetScheduledReports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reporting.proto",
}
